# Docker Compose stack to run the API, Redis and Mongo locally
x-health: &health_defaults
  interval: 30s
  timeout: 5s
  retries: 3
  start_period: 20s

services:
  mongo:
    # MongoDB stores conversation history and documents
    image: mongo:latest
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - "mongo_data:/data/db"
    env_file: .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME:?Should be set}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:?Should be set}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-smarthelperdb}
    healthcheck:
      <<: *health_defaults
      test:
        - CMD
        - mongo
        - --eval
        - db.adminCommand('ping')
        - --quiet

  redis:
    # Redis is used for the vector store and Celery broker
    image: redis/redis-stack-server
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      <<: *health_defaults
      test:
        - CMD
        - redis-cli
        - ping

  celery_worker:
    # Processes scheduled tasks that update the vector store
    build:
      context: ./
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file: .env
    environment:
      MONGO_URI: ${MONGO_URI:-mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongo:27017}
    command: ["uv", "run", "celery", "-A", "worker", "worker", "--loglevel=INFO"]
    depends_on:
      redis:
        condition: service_healthy
      mongo:
        condition: service_healthy
      vllm:
        condition: service_healthy
      celery_beat:
        condition: service_started
    healthcheck:
      <<: *health_defaults
      test:
        - CMD-SHELL
        - test $(pgrep -fc celery) -ge 1

  celery_beat:
    # Scheduler for periodic vector store updates
    build:
      context: ./
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file: .env
    command: ["uv", "run", "celery", "-A", "worker", "beat", "--loglevel=INFO"]
    depends_on:
      - redis

  app:
    # FastAPI application exposing the LLM endpoints
    build:
      context: ./
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file: .env
    environment:
      MONGO_URI: ${MONGO_URI:-mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongo:27017}
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
      mongo:
        condition: service_healthy
      vllm:
        condition: service_healthy
      qdrant:
        condition: service_started
    healthcheck:
      <<: *health_defaults
      test:
        - CMD
        - curl
        - -fs
        - http://localhost:8000/health

  qdrant:
    image: qdrant/qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage

  vllm:
    image: ghcr.io/vikhrai/vikhr-gpt-8b-it:latest
    runtime: nvidia
    environment:
      - HF_HOME=/data/hf
      - MODEL_PATH=/models/vikhr-gpt-8b-it
      - PORT=8080
    volumes:
      - ./models:/models:ro
      - ./data/hf:/data/hf
    ports:
      - "8080:8080"
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [gpu]
    healthcheck:
      <<: *health_defaults
      test:
        - CMD-SHELL
        - curl -sf http://localhost:8080/health || exit 1

  telegram-bot:
    build:
      context: .
      dockerfile: docker/Dockerfile.tg_bot
    env_file: .env
    depends_on:
      - app

volumes:
  mongo_data:
  qdrant_data:
